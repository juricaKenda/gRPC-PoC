// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc_ping_pong.proto

package pingPongPackage

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Ping struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0a837c4ecd9f259, []int{0}
}

func (m *Ping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ping.Unmarshal(m, b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return xxx_messageInfo_Ping.Size(m)
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

func (m *Ping) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Pong struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pong) Reset()         { *m = Pong{} }
func (m *Pong) String() string { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()    {}
func (*Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0a837c4ecd9f259, []int{1}
}

func (m *Pong) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pong.Unmarshal(m, b)
}
func (m *Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pong.Marshal(b, m, deterministic)
}
func (m *Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pong.Merge(m, src)
}
func (m *Pong) XXX_Size() int {
	return xxx_messageInfo_Pong.Size(m)
}
func (m *Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_Pong proto.InternalMessageInfo

func (m *Pong) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Ping)(nil), "pingPongPackage.Ping")
	proto.RegisterType((*Pong)(nil), "pingPongPackage.Pong")
}

func init() {
	proto.RegisterFile("grpc_ping_pong.proto", fileDescriptor_f0a837c4ecd9f259)
}

var fileDescriptor_f0a837c4ecd9f259 = []byte{
	// 142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x49, 0x2f, 0x2a, 0x48,
	0x8e, 0x2f, 0xc8, 0xcc, 0x4b, 0x8f, 0x2f, 0xc8, 0xcf, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x07, 0x09, 0x04, 0xe4, 0xe7, 0xa5, 0x07, 0x24, 0x26, 0x67, 0x27, 0xa6, 0xa7, 0x2a,
	0x29, 0x70, 0xb1, 0x04, 0x64, 0xe6, 0xa5, 0x0b, 0x49, 0x70, 0xb1, 0xe7, 0xa6, 0x16, 0x17, 0x27,
	0xa6, 0xa7, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xb8, 0x60, 0x15, 0xf9, 0xf8, 0x54,
	0x18, 0xf9, 0x72, 0xf1, 0x07, 0x40, 0x8d, 0x0d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x15, 0xb2,
	0xe2, 0x62, 0x71, 0xce, 0x48, 0x2c, 0x11, 0x12, 0xd5, 0x43, 0xb3, 0x50, 0x0f, 0xa4, 0x52, 0x0a,
	0x8b, 0x70, 0x7e, 0x5e, 0xba, 0x12, 0x83, 0x06, 0xa3, 0x01, 0x63, 0x12, 0x1b, 0xd8, 0xa9, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x16, 0xfa, 0x59, 0xf7, 0xc2, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PingPongServiceClient is the client_golang API for PingPongService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PingPongServiceClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (PingPongService_ChatClient, error)
}

type pingPongServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPingPongServiceClient(cc grpc.ClientConnInterface) PingPongServiceClient {
	return &pingPongServiceClient{cc}
}

func (c *pingPongServiceClient) Chat(ctx context.Context, opts ...grpc.CallOption) (PingPongService_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PingPongService_serviceDesc.Streams[0], "/pingPongPackage.PingPongService/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingPongServiceChatClient{stream}
	return x, nil
}

type PingPongService_ChatClient interface {
	Send(*Ping) error
	Recv() (*Pong, error)
	grpc.ClientStream
}

type pingPongServiceChatClient struct {
	grpc.ClientStream
}

func (x *pingPongServiceChatClient) Send(m *Ping) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pingPongServiceChatClient) Recv() (*Pong, error) {
	m := new(Pong)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PingPongServiceServer is the server API for PingPongService service.
type PingPongServiceServer interface {
	Chat(PingPongService_ChatServer) error
}

// UnimplementedPingPongServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPingPongServiceServer struct {
}

func (*UnimplementedPingPongServiceServer) Chat(srv PingPongService_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}

func RegisterPingPongServiceServer(s *grpc.Server, srv PingPongServiceServer) {
	s.RegisterService(&_PingPongService_serviceDesc, srv)
}

func _PingPongService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PingPongServiceServer).Chat(&pingPongServiceChatServer{stream})
}

type PingPongService_ChatServer interface {
	Send(*Pong) error
	Recv() (*Ping, error)
	grpc.ServerStream
}

type pingPongServiceChatServer struct {
	grpc.ServerStream
}

func (x *pingPongServiceChatServer) Send(m *Pong) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pingPongServiceChatServer) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PingPongService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pingPongPackage.PingPongService",
	HandlerType: (*PingPongServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _PingPongService_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc_ping_pong.proto",
}
